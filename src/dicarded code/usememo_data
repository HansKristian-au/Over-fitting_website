export default function AddPredictors(){
 const { initialData, initialModel, y } = useMemo(() => {
  const pre_initialData = Array.from({ length: 20 }, () => ({
    dataset1: normalRandomMarsaglia(50, 10),
    dataset2: normalRandomMarsaglia(40, 5),
    dataset3: normalRandomMarsaglia(65, 8),
    dataset4: normalRandomMarsaglia(30, 7),
    dataset5: normalRandomMarsaglia(34, 2),
    dataset6: normalRandomMarsaglia(21, 4),
    dataset7: normalRandomMarsaglia(46, 1),
    dataset8: normalRandomMarsaglia(78, 9),
    dataset9: normalRandomMarsaglia(25, 6),
    dataset10: normalRandomMarsaglia(41, 3),
    dataset11: normalRandomMarsaglia(55, 7),
    dataset12: normalRandomMarsaglia(63, 8),
    dataset13: normalRandomMarsaglia(37, 4),
    dataset14: normalRandomMarsaglia(26, 8),
    dataset15: normalRandomMarsaglia(70, 10),
    dataset16: normalRandomMarsaglia(32, 5),
  }));


const initialData = [...pre_initialData].sort((a, b) => a.dataset2 - b.dataset2);



  // Initial regression (only using dataset2 as predictor)
const initialDesignMatrix = createDesignMatrix(initialData.map(d => [d.dataset2]));
const y = initialData.map(d => [d.dataset1]);
const initialBetas = OLS(initialDesignMatrix, y);
const initialModel = multiplyMatrices(initialDesignMatrix, initialBetas).map(row => row[0]);
return { initialData, initialModel, y };
}, []);